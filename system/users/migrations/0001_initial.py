# Generated by Django 5.2.6 on 2025-10-31 10:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('campus', models.CharField(choices=[('TINIGUIBAN', 'Tiniguiban Campus'), ('EXTERNAL', 'External Campus')], default='TINIGUIBAN', max_length=20)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='colleges/logos/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('given_name', models.CharField(max_length=150)),
                ('middle_initial', models.CharField(blank=True, max_length=1, null=True)),
                ('last_name', models.CharField(max_length=150)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('sex', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=6)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact_no', models.CharField(max_length=20)),
                ('campus', models.CharField(blank=True, choices=[('TINUIGIBAN', 'Tinuigiban'), ('RIZAL', 'Rizal'), ('NARRA', 'Narra'), ('QUEZON', 'Quezon'), ('ARACELI', 'Araceli'), ('BROOKES_POINT', "Brooke's Point"), ('SAN_VICENTE', 'San Vicente'), ('CUYO', 'Cuyo'), ('CORON', 'Coron'), ('BALABAC', 'Balabac'), ('ROXAS', 'Roxas'), ('TAYTAY', 'Taytay'), ('EL_NIDO', 'El Nido'), ('LINAPACAN', 'Linapacan'), ('SAN_RAFAEL', 'San Rafael'), ('SOFRONIO_ESPANOLA', 'Sofronio Espa√±ola'), ('DUMARAN', 'Dumaran'), ('BATARAZA', 'Bataraza')], max_length=30, null=True)),
                ('role', models.CharField(choices=[('FACULTY', 'Faculty'), ('IMPLEMENTER', 'Implementer'), ('CLIENT', 'Client'), ('UESO', 'UESO'), ('COORDINATOR', 'College Coordinator'), ('DEAN', 'College Dean'), ('PROGRAM_HEAD', 'Program Head'), ('DIRECTOR', 'Director of Extension'), ('VP', 'Vice President')], max_length=50)),
                ('degree', models.CharField(blank=True, max_length=255, null=True)),
                ('expertise', models.CharField(blank=True, max_length=255, null=True)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('industry', models.CharField(blank=True, max_length=255, null=True)),
                ('is_expert', models.BooleanField(default=False)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='users/profile_pictures/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('preferred_id', models.CharField(blank=True, choices=[('PASSPORT', 'Passport'), ('DRIVERS_LICENSE', "Driver's License"), ('UMID', 'UMID'), ('SSS', 'SSS'), ('GSIS', 'GSIS'), ('PRC', 'PRC'), ('OTHERS', 'Others')], max_length=50, null=True)),
                ('valid_id', models.ImageField(blank=True, null=True, upload_to='users/valid_ids/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_users', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('college', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.college')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
